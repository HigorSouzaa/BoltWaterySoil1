/**
 * Script de teste para o sistema de alertas autom√°ticos
 * 
 * Este script simula o envio de dados de sensores que ultrapassam
 * os limites configurados pelo usu√°rio, testando:
 * 1. Cria√ß√£o autom√°tica de alertas
 * 2. Envio de emails
 * 3. Sistema de cooldown
 * 4. Notifica√ß√µes no dashboard
 * 
 * USO:
 * node test-automatic-alerts.js <moduleId> <userId>
 * 
 * Exemplo:
 * node test-automatic-alerts.js 67890abcdef12345 12345abcdef67890
 */

const mongoose = require('mongoose');
const dotenv = require('dotenv');
const WaterySoilModule = require('./models/WaterySoilModule');
const User = require('./models/User');
const Sector = require('./models/Sector');
const { monitorSensorData } = require('./services/alertMonitoringService');

dotenv.config();

// Conectar ao banco de dados
mongoose.connect(process.env.MONGO_URL)
  .then(() => console.log('‚úÖ Conectado ao MongoDB'))
  .catch(err => {
    console.error('‚ùå Erro ao conectar ao MongoDB:', err);
    process.exit(1);
  });

async function testAutomaticAlerts() {
  try {
    console.log('\nüß™ TESTE DO SISTEMA DE ALERTAS AUTOM√ÅTICOS\n');
    console.log('='.repeat(60));

    // 1. Buscar primeiro usu√°rio com alertSettings configurado
    const user = await User.findOne({ 'alertSettings.humidity.enabled': true });
    
    if (!user) {
      console.log('‚ùå Nenhum usu√°rio encontrado com alertSettings configurado');
      console.log('üí° Configure os alertas no dashboard primeiro!');
      process.exit(1);
    }

    console.log(`\n‚úÖ Usu√°rio encontrado: ${user.name} (${user.email})`);
    console.log('\nüìã Configura√ß√µes de Alertas:');
    console.log(`   Umidade: ${user.alertSettings.humidity.min}% - ${user.alertSettings.humidity.max}% (${user.alertSettings.humidity.enabled ? 'Ativo' : 'Inativo'})`);
    console.log(`   Temperatura: ${user.alertSettings.temperature.min}¬∞C - ${user.alertSettings.temperature.max}¬∞C (${user.alertSettings.temperature.enabled ? 'Ativo' : 'Inativo'})`);
    console.log(`   pH: ${user.alertSettings.ph.min} - ${user.alertSettings.ph.max} (${user.alertSettings.ph.enabled ? 'Ativo' : 'Inativo'})`);
    console.log(`   Email: ${user.alertSettings.emailNotifications ? 'Ativo' : 'Inativo'}`);
    console.log(`   Sistema: ${user.alertSettings.systemNotifications ? 'Ativo' : 'Inativo'}`);

    // 2. Buscar primeiro m√≥dulo do usu√°rio
    const module = await WaterySoilModule.findOne({ 
      user_id: user._id,
      is_active: true 
    });

    if (!module) {
      console.log('\n‚ùå Nenhum m√≥dulo encontrado para este usu√°rio');
      console.log('üí° Cadastre um m√≥dulo no dashboard primeiro!');
      process.exit(1);
    }

    console.log(`\n‚úÖ M√≥dulo encontrado: ${module.name} (${module.mac_address})`);

    // 3. Buscar setor
    const sector = await Sector.findById(module.sector_id);
    
    if (!sector) {
      console.log('\n‚ùå Setor n√£o encontrado');
      process.exit(1);
    }

    console.log(`‚úÖ Setor: ${sector.name}`);

    // 4. Preparar dados de teste
    console.log('\n' + '='.repeat(60));
    console.log('üìä TESTE 1: Umidade ABAIXO do limite m√≠nimo');
    console.log('='.repeat(60));

    const testData1 = {
      soil_moisture: user.alertSettings.humidity.min - 5, // 5% abaixo do m√≠nimo
      temperature: 25,
      ph: 7.0
    };

    console.log(`\nüì§ Enviando dados: Umidade = ${testData1.soil_moisture}% (limite m√≠n: ${user.alertSettings.humidity.min}%)`);
    
    await monitorSensorData(
      user._id.toString(),
      sector._id.toString(),
      sector.name,
      testData1,
      new Date()
    );

    console.log('‚úÖ Monitoramento executado! Verifique:');
    console.log('   1. Banco de dados (cole√ß√£o alerts)');
    console.log('   2. Email do usu√°rio');
    console.log('   3. Dashboard (√≠cone de sino)');

    // Aguardar 2 segundos
    await new Promise(resolve => setTimeout(resolve, 2000));

    // 5. Teste 2: Temperatura ACIMA do limite m√°ximo
    console.log('\n' + '='.repeat(60));
    console.log('üìä TESTE 2: Temperatura ACIMA do limite m√°ximo');
    console.log('='.repeat(60));

    const testData2 = {
      soil_moisture: 50,
      temperature: user.alertSettings.temperature.max + 5, // 5¬∞C acima do m√°ximo
      ph: 7.0
    };

    console.log(`\nüì§ Enviando dados: Temperatura = ${testData2.temperature}¬∞C (limite m√°x: ${user.alertSettings.temperature.max}¬∞C)`);
    
    await monitorSensorData(
      user._id.toString(),
      sector._id.toString(),
      sector.name,
      testData2,
      new Date()
    );

    console.log('‚úÖ Monitoramento executado!');

    // Aguardar 2 segundos
    await new Promise(resolve => setTimeout(resolve, 2000));

    // 6. Teste 3: pH ABAIXO do limite m√≠nimo
    console.log('\n' + '='.repeat(60));
    console.log('üìä TESTE 3: pH ABAIXO do limite m√≠nimo');
    console.log('='.repeat(60));

    const testData3 = {
      soil_moisture: 50,
      temperature: 25,
      ph: user.alertSettings.ph.min - 0.5 // 0.5 abaixo do m√≠nimo
    };

    console.log(`\nüì§ Enviando dados: pH = ${testData3.ph} (limite m√≠n: ${user.alertSettings.ph.min})`);
    
    await monitorSensorData(
      user._id.toString(),
      sector._id.toString(),
      sector.name,
      testData3,
      new Date()
    );

    console.log('‚úÖ Monitoramento executado!');

    // Aguardar 2 segundos
    await new Promise(resolve => setTimeout(resolve, 2000));

    // 7. Teste 4: Cooldown - Tentar criar alerta duplicado
    console.log('\n' + '='.repeat(60));
    console.log('üìä TESTE 4: Sistema de Cooldown (30 minutos)');
    console.log('='.repeat(60));

    console.log(`\nüì§ Enviando NOVAMENTE dados de umidade baixa...`);
    
    await monitorSensorData(
      user._id.toString(),
      sector._id.toString(),
      sector.name,
      testData1, // Mesmos dados do teste 1
      new Date()
    );

    console.log('‚úÖ Monitoramento executado!');
    console.log('‚è≥ Este alerta deve estar em COOLDOWN (n√£o deve criar novo alerta)');

    // 8. Resumo final
    console.log('\n' + '='.repeat(60));
    console.log('‚úÖ TESTES CONCLU√çDOS!');
    console.log('='.repeat(60));
    console.log('\nüìã Resumo:');
    console.log('   ‚úÖ Teste 1: Umidade abaixo do limite ‚Üí Alerta criado');
    console.log('   ‚úÖ Teste 2: Temperatura acima do limite ‚Üí Alerta criado');
    console.log('   ‚úÖ Teste 3: pH abaixo do limite ‚Üí Alerta criado');
    console.log('   ‚úÖ Teste 4: Cooldown ‚Üí Alerta bloqueado');
    console.log('\nüîç Verifique:');
    console.log('   1. MongoDB: db.alerts.find({ isAutomatic: true })');
    console.log('   2. Email: Verifique a caixa de entrada de', user.email);
    console.log('   3. Dashboard: http://localhost:5174/ (√≠cone de sino)');
    console.log('\nüí° Dica: Para testar novamente, aguarde 30 minutos ou limpe os alertas no banco.');

  } catch (error) {
    console.error('\n‚ùå Erro durante os testes:', error);
  } finally {
    // Aguardar 3 segundos antes de fechar para garantir que os emails sejam enviados
    console.log('\n‚è≥ Aguardando 3 segundos para finalizar...');
    await new Promise(resolve => setTimeout(resolve, 3000));
    
    await mongoose.connection.close();
    console.log('\n‚úÖ Conex√£o com MongoDB fechada');
    process.exit(0);
  }
}

// Executar testes
testAutomaticAlerts();

